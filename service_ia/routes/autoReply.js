const express = require('express');
const router = express.Router();
const AutoReply = require('../models/AutoReply');
const authenticateToken = require('../middleware/authenticate');

// ‚úÖ V√©rifier si un message a une r√©ponse IA
router.get('/check/:messageId', authenticateToken, async (req, res) => {
  try {
    const { messageId } = req.params;
    
    console.log(`üîç [Check AI Reply] messageId=${messageId}, userId=${req.userId}`);
    
    const reply = await AutoReply.findOne({
      userId: req.userId, // ‚úÖ CORRECTION : Utiliser req.userId (correspond au middleware)
      messageId: messageId,
      status: 'sent' // Uniquement les r√©ponses envoy√©es
    });
    
    console.log(`‚úÖ [Check AI Reply] R√©sultat: ${reply ? 'Trouv√©' : 'Non trouv√©'}`);
    
    res.json({ 
      hasReply: !!reply,
      sentAt: reply?.sentAt || null
    });
  } catch (error) {
    console.error('‚ùå Erreur check AI reply:', error);
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ V√©rifier plusieurs messages en une fois (plus performant)
router.post('/check-batch', authenticateToken, async (req, res) => {
  try {
    const { messageIds } = req.body;
    
    if (!Array.isArray(messageIds)) {
      return res.status(400).json({ error: 'messageIds doit √™tre un tableau' });
    }

    console.log(`üîç [Check Batch] V√©rification de ${messageIds.length} messages pour userId=${req.userId}`);
    
    // ‚úÖ Recherche optimis√©e en une seule requ√™te
    const replies = await AutoReply.find({
      userId: req.userId, // ‚úÖ CORRECTION : Utiliser req.userId au lieu de req.user.id
      messageId: { $in: messageIds },
      status: 'sent' // Uniquement les r√©ponses envoy√©es
    }).select('messageId').lean();
    
    // Cr√©er un Set pour recherche rapide
    const repliedIds = new Set(replies.map(r => r.messageId));
    
    // Cr√©er le map de r√©ponse
    const hasReplyMap = {};
    messageIds.forEach(id => {
      hasReplyMap[id] = repliedIds.has(id);
    });

    console.log(`‚úÖ [Check Batch] ${replies.length} r√©ponse(s) IA trouv√©e(s) sur ${messageIds.length}`);
    
    // ‚úÖ DEBUG : Afficher les messages avec r√©ponse
    if (replies.length > 0) {
      console.log(`ü§ñ Messages avec r√©ponse IA:`, replies.map(r => r.messageId.substring(0, 10) + '...'));
    }
    
    res.json(hasReplyMap);
  } catch (error) {
    console.error('‚ùå Erreur check batch:', error);
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ BONUS : R√©cup√©rer toutes les r√©ponses envoy√©es (pour historique)
router.get('/sent', authenticateToken, async (req, res) => {
  try {
    const { limit = 50, skip = 0 } = req.query;
    
    console.log(`üìä [Get Sent] userId=${req.userId}, limit=${limit}, skip=${skip}`);
    
    const replies = await AutoReply.find({
      userId: req.userId, // ‚úÖ CORRECTION : Utiliser req.userId
      status: 'sent'
    })
    .sort({ sentAt: -1 })
    .limit(parseInt(limit))
    .skip(parseInt(skip))
    .select('messageId threadId from subject sentAt generatedResponse')
    .lean();
    
    const total = await AutoReply.countDocuments({
      userId: req.userId, // ‚úÖ CORRECTION : Utiliser req.userId
      status: 'sent'
    });

    console.log(`‚úÖ [Get Sent] ${replies.length} r√©ponses retourn√©es sur ${total} total`);
    
    res.json({
      replies,
      total,
      hasMore: total > (parseInt(skip) + replies.length)
    });
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration historique:', error);
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ NOUVEAU : R√©cup√©rer les d√©tails d'une r√©ponse sp√©cifique
router.get('/reply/:messageId', authenticateToken, async (req, res) => {
  try {
    const { messageId } = req.params;
    
    console.log(`üîç [Get Reply Detail] messageId=${messageId}, userId=${req.userId}`);
    
    const reply = await AutoReply.findOne({
      userId: req.userId,
      messageId: messageId
    }).lean();
    
    if (!reply) {
      return res.status(404).json({ error: 'R√©ponse non trouv√©e' });
    }
    
    console.log(`‚úÖ [Get Reply Detail] Trouv√©e: status=${reply.status}`);
    
    res.json(reply);
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration d√©tail:', error);
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ NOUVEAU : Supprimer les enregistrements "processing" bloqu√©s (maintenance)
router.delete('/cleanup-stuck', authenticateToken, async (req, res) => {
  try {
    const ONE_HOUR_AGO = new Date(Date.now() - 60 * 60 * 1000);
    
    console.log(`üßπ [Cleanup] Nettoyage des processing bloqu√©s pour userId=${req.userId}`);
    
    const result = await AutoReply.deleteMany({
      userId: req.userId,
      status: 'processing',
      createdAt: { $lt: ONE_HOUR_AGO } // Plus vieux qu'1 heure
    });
    
    console.log(`‚úÖ [Cleanup] ${result.deletedCount} enregistrements supprim√©s`);
    
    res.json({
      deleted: result.deletedCount,
      message: `${result.deletedCount} enregistrement(s) bloqu√©(s) supprim√©(s)`
    });
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error);
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ NOUVEAU : Statistiques des r√©ponses IA
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    console.log(`üìä [Stats] userId=${req.userId}`);
    
    const [sent, pending, ignored, processing] = await Promise.all([
      AutoReply.countDocuments({ userId: req.userId, status: 'sent' }),
      AutoReply.countDocuments({ userId: req.userId, status: 'pending' }),
      AutoReply.countDocuments({ userId: req.userId, status: 'ignored' }),
      AutoReply.countDocuments({ userId: req.userId, status: 'processing' })
    ]);
    
    // Statistiques sur les 30 derniers jours
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    
    const recentStats = await AutoReply.aggregate([
      {
        $match: {
          userId: req.userId,
          createdAt: { $gte: thirtyDaysAgo },
          status: 'sent'
        }
      },
      {
        $group: {
          _id: { $dateToString: { format: "%Y-%m-%d", date: "$sentAt" } },
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);
    
    console.log(`‚úÖ [Stats] sent=${sent}, pending=${pending}, ignored=${ignored}, processing=${processing}`);
    
    res.json({
      total: {
        sent,
        pending,
        ignored,
        processing
      },
      last30Days: recentStats
    });
  } catch (error) {
    console.error('‚ùå Erreur statistiques:', error);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
