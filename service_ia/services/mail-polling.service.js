const User = require('../models/User');
const AutoReply = require('../models/AutoReply');
const aiService = require('./ai.service');
const axios = require('axios');

class MailPollingService {
  constructor() {
    this.processingMessages = new Set(); // ‚úÖ Verrou pour √©viter les doublons
  }

  async checkAllUsers() {
    try {
      const startTime = Date.now();
      console.log('üîç [Polling] V√©rification...');

      const users = await User.find({
        'aiSettings.isEnabled': true,
        'aiSettings.autoReplyEnabled': true,
        'emailConfig.accessToken': { $exists: true }
      });

      if (users.length === 0) {
        console.log('‚ÑπÔ∏è [Polling] Aucun utilisateur actif');
        return;
      }

      console.log(`üë• [Polling] ${users.length} utilisateurs`);

      let totalSent = 0;

      // ‚úÖ TRAITER UN UTILISATEUR √Ä LA FOIS (pas en parall√®le)
      for (const user of users) {
        const result = await this.checkUserEmails(user);
        if (result?.sent) {
          totalSent += result.sent;
        }
      }

      const duration = ((Date.now() - startTime) / 1000).toFixed(2);
      console.log(`‚úÖ [Polling] Termin√© (${duration}s) - ${totalSent} r√©ponses envoy√©es`);

    } catch (error) {
      console.error('‚ùå [Polling] Erreur:', error.message);
    }
  }

  async checkUserEmails(user) {
    try {
      const newMessages = await this.fetchNewEmails(user.emailConfig);

      if (newMessages.length === 0) {
        return { processed: 0, sent: 0 };
      }

      console.log(`  üì® ${newMessages.length} nouveaux messages non lus`);

      let sent = 0;
      let alreadyProcessedCount = 0;

      // ‚úÖ TRAITER UN MESSAGE √Ä LA FOIS (s√©quentiel)
      for (const message of newMessages) {
        const result = await this.processMessage(message, user);
        if (result?.sent) {
          sent++;
        } else if (result?.alreadyProcessed) {
          alreadyProcessedCount++;
        }
      }

      if (alreadyProcessedCount > 0) {
        console.log(`  ‚è≠Ô∏è ${alreadyProcessedCount} messages d√©j√† trait√©s (0 token consomm√©)`);
      }

      return { processed: newMessages.length, sent };

    } catch (error) {
      console.error(`  ‚ùå [${user.email}] Erreur:`, error.message);
      return { processed: 0, sent: 0 };
    }
  }

  async processMessage(message, user) {
    // ‚úÖ V√âRIFIER SI LE MESSAGE EST EN COURS DE TRAITEMENT
    const lockKey = `${user._id}-${message.id}`;
    
    if (this.processingMessages.has(lockKey)) {
      console.log(`    ‚è≠Ô∏è Message d√©j√† en cours de traitement`);
      return { sent: false, alreadyProcessed: true };
    }

    // ‚úÖ VERROUILLER LE MESSAGE
    this.processingMessages.add(lockKey);

    try {
      // ‚úÖ V√âRIFIER SI D√âJ√Ä TRAIT√â
      const alreadyProcessed = await AutoReply.findOne({
        userId: user._id,
        messageId: message.id
      });

      if (alreadyProcessed) {
        await this.markAsRead(message.id, user.emailConfig);
        return { sent: false, alreadyProcessed: true };
      }

      console.log(`    üì© Nouveau: ${message.from} - "${message.subject}"`);

      const fullMessage = await this.fetchFullMessage(message.id, user.emailConfig);
      
      if (!fullMessage) {
        console.log(`    ‚ùå Impossible de r√©cup√©rer le message`);
        await this.markAsRead(message.id, user.emailConfig);
        return { sent: false, alreadyProcessed: false };
      }

      const conversationHistory = await this.getConversationHistory(
        fullMessage.threadId, 
        user.emailConfig
      );

      const analysis = await aiService.analyzeMessage(fullMessage, user, conversationHistory);

      if (!analysis.is_relevant) {
        console.log(`    ‚è≠Ô∏è Non pertinent: ${analysis.reason}`);
        
        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          threadId: fullMessage.threadId,
          from: message.from,
          subject: message.subject,
          body: fullMessage.body,
          analysis: {
            isRelevant: false,
            confidence: analysis.confidence,
            intent: analysis.intent,
            reason: analysis.reason
          },
          status: 'ignored'
        });

        await this.markAsRead(message.id, user.emailConfig);
        return { sent: false, alreadyProcessed: false };
      }

      console.log(`    ‚úÖ Pertinent: ${analysis.intent} (${(analysis.confidence * 100).toFixed(0)}%)`);

      const response = await aiService.generateResponse(
        fullMessage, 
        analysis, 
        user, 
        conversationHistory
      );

      const shouldAutoSend = user.aiSettings.autoReplyEnabled &&
                           !user.aiSettings.requireValidation &&
                           analysis.confidence >= 0.8;

      if (shouldAutoSend) {
        console.log(`    üì§ Envoi r√©ponse dans thread ${fullMessage.threadId}...`);
        
        const sendSuccess = await this.sendReply(fullMessage, response, user);

        if (!sendSuccess) {
          console.log(`    ‚ùå √âchec envoi`);
          return { sent: false, alreadyProcessed: false };
        }

        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          threadId: fullMessage.threadId,
          from: message.from,
          subject: message.subject,
          body: fullMessage.body,
          analysis: {
            isRelevant: true,
            confidence: analysis.confidence,
            intent: analysis.intent
          },
          generatedResponse: response,
          sentResponse: response,
          status: 'sent',
          sentAt: new Date()
        });

        await this.markAsRead(message.id, user.emailConfig);

        console.log(`    ‚úÖ R√©ponse envoy√©e √† ${message.from}`);
        return { sent: true, alreadyProcessed: false };

      } else {
        console.log(`    ‚è∏Ô∏è En attente de validation`);
        
        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          threadId: fullMessage.threadId,
          from: message.from,
          subject: message.subject,
          body: fullMessage.body,
          analysis: {
            isRelevant: true,
            confidence: analysis.confidence,
            intent: analysis.intent
          },
          generatedResponse: response,
          status: 'pending'
        });

        return { sent: false, alreadyProcessed: false };
      }

    } catch (error) {
      console.error(`    ‚ùå Erreur traitement:`, error.message);
      
      try {
        await this.markAsRead(message.id, user.emailConfig);
      } catch (markError) {}
      
      return { sent: false, alreadyProcessed: false };
      
    } finally {
      // ‚úÖ D√âVERROUILLER LE MESSAGE
      this.processingMessages.delete(lockKey);
    }
  }

  // ... reste du code identique
}

module.exports = new MailPollingService();
