// service_ia/services/ai.service.js
// ‚úÖ VERSION OPTIMIS√âE - 1 seul appel OpenAI au lieu de 2

const axios = require('axios');
const contextBuilder = require('./context-builder.service');

class AIService {
  
  /**
   * üéØ NOUVELLE M√âTHODE OPTIMIS√âE
   * Analyse + G√©n√©ration en 1 SEUL appel OpenAI
   * √âconomie : 50% de tokens et requ√™tes
   */
  async analyzeAndGenerateResponse(message, user, conversationHistory = [], driveData = null) {
    const settings = user.aiSettings;
    const apiKey = process.env.K2S_IQ;
    
    if (!apiKey) {
      throw new Error('Cl√© API OpenAI manquante');
    }

    console.log(`[AI:${user._id}] ü§ñ Analyse + G√©n√©ration en 1 appel...`);

    // ‚úÖ Charger contexte Drive UNE SEULE FOIS (ou utiliser celui pass√© en param)
    const accessToken = user.emailConfig?.accessToken;
    let driveContext = '';
    
    if (driveData) {
      // Utiliser driveData d√©j√† charg√© (0 requ√™te suppl√©mentaire)
      driveContext = this._buildContextFromDriveData(driveData);
      console.log(`[AI:${user._id}] ‚úÖ Contexte Drive depuis cache (${driveContext.length} chars)`);
    } else if (accessToken) {
      try {
        driveContext = await contextBuilder.buildContextFromDrive(
          accessToken, 
          user._id.toString(),
          { includeAppointments: true }
        );
        console.log(`[AI:${user._id}] ‚úÖ Contexte Drive charg√© (${driveContext.length} chars)`);
      } catch (driveError) {
        console.warn(`[AI:${user._id}] ‚ö†Ô∏è Erreur Drive:`, driveError.message);
        driveContext = contextBuilder._buildMinimalContext();
      }
    } else {
      driveContext = contextBuilder._buildMinimalContext();
    }

    // Construire le prompt COMBIN√â
    const systemPrompt = this._buildCombinedSystemPrompt(driveContext, settings);
    const userPrompt = this._buildCombinedUserPrompt(message, conversationHistory);

    try {
      // ‚úÖ Construction de la requ√™te avec response_format conditionnel
      const requestBody = {
        model: settings.aiModel || 'mistral-small-latest',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.5,
        max_tokens: 800
      };

 const response = await axios.post(
  'https://api.mistral.ai/v1/chat/completions',
  requestBody,
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      const content = response.data.choices[0].message.content;

      // Parser la r√©ponse JSON combin√©e
      let result;
      try {
        // ‚úÖ Nettoyer la r√©ponse avant parsing (enlever markdown si pr√©sent)
        let cleanContent = content.trim();
        
        // Retirer les balises markdown ```json et ```
        if (cleanContent.startsWith('```json')) {
          cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/```\s*$/, '');
        } else if (cleanContent.startsWith('```')) {
          cleanContent = cleanContent.replace(/^```\s*/, '').replace(/```\s*$/, '');
        }
        
        result = JSON.parse(cleanContent);
      } catch (parseError) {
        console.error(`[AI:${user._id}] ‚ùå Erreur parsing JSON:`, parseError.message);
        console.error('Contenu brut:', content.substring(0, 500));
        return {
          analysis: {
            is_relevant: false,
            confidence: 0.1,
            intent: 'error',
            reason: 'Erreur parsing r√©ponse IA'
          },
          response: null
        };
      }

      // ‚úÖ Normaliser la r√©ponse
      const normalizedResult = {
        analysis: {
          is_relevant: result.is_relevant ?? result.analysis?.is_relevant ?? false,
          confidence: result.confidence ?? result.analysis?.confidence ?? 0.5,
          intent: result.intent ?? result.analysis?.intent ?? 'unknown',
          reason: result.reason ?? result.analysis?.reason ?? 'Non sp√©cifi√©',
          details: result.details ?? result.analysis?.details ?? {}
        },
        response: result.response ?? null
      };

      console.log(`[AI:${user._id}] ‚úÖ Analyse: ${normalizedResult.analysis.intent} (${(normalizedResult.analysis.confidence * 100).toFixed(0)}%) - Pertinent: ${normalizedResult.analysis.is_relevant}`);
      
      if (normalizedResult.response) {
        console.log(`[AI:${user._id}] ‚úÖ R√©ponse g√©n√©r√©e (${normalizedResult.response.length} chars)`);
      }

      return normalizedResult;

    } catch (error) {
      console.error(`[AI:${user._id}] ‚ùå Erreur IA combin√©e:`, error.message);
      if (error.response) {
        console.error('D√©tails API:', error.response.data);
      }
      
      return {
        analysis: {
          is_relevant: false,
          confidence: 0.0,
          intent: 'error',
          reason: `Erreur IA: ${error.message}`
        },
        response: null
      };
    }
  }

  /**
   * üìù Construire le prompt syst√®me COMBIN√â (analyse + g√©n√©ration)
   */
  _buildCombinedSystemPrompt(driveContext, settings) {
    const tone = settings.tone || 'professionnel';
    
    return `${driveContext}

---

Tu es ${settings.role || 'un assistant virtuel'} pour ${settings.salonName || 'cette entreprise'}.

**INSTRUCTIONS** :
${settings.instructions || 'Sois professionnel et courtois.'}

**TON** : ${tone}

**T√ÇCHE EN 2 √âTAPES** :

1Ô∏è‚É£ **ANALYSE** : D√©termine si le message est pertinent
   - ‚úÖ Pertinent : RDV, questions prestations/tarifs/horaires, annulation/modification
   - ‚ùå Non pertinent : spam, pub, newsletter, notification auto (TikTok, LinkedIn, etc.)

2Ô∏è‚É£ **R√âPONSE** : Si pertinent, g√©n√®re une r√©ponse professionnelle
   - Utilise les infos du contexte Drive
   - Concis (3-5 phrases max)
   - Propose des cr√©neaux concrets si pertinent
   - Termine par formule de politesse
   - N'invente JAMAIS d'infos non pr√©sentes

**FORMAT DE R√âPONSE STRICTEMENT JSON (aucun texte avant/apr√®s)** :
{
  "is_relevant": true/false,
  "confidence": 0.0 √† 1.0,
  "intent": "prise_rdv"|"question_info"|"annulation"|"modification"|"reclamation"|"spam"|"autre",
  "reason": "Explication courte",
  "details": {
    "date_souhaitee": "si mentionn√©e",
    "prestation_souhaitee": "si mentionn√©e"
  },
  "response": "Ta r√©ponse si is_relevant=true, sinon null"
}

IMPORTANT : R√©ponds UNIQUEMENT avec le JSON, rien d'autre.`;
  }

  /**
   * üìù Construire le prompt utilisateur COMBIN√â
   */
  _buildCombinedUserPrompt(message, conversationHistory) {
    let prompt = '';

    if (conversationHistory.length > 0) {
      prompt += '**HISTORIQUE CONVERSATION** :\n';
      conversationHistory.slice(-3).forEach(msg => {
        prompt += `- ${msg.from}: ${msg.body.substring(0, 100)}...\n`;
      });
      prompt += '\n';
    }

    prompt += `**MESSAGE √Ä ANALYSER ET R√âPONDRE** :
De: ${message.from}
Sujet: ${message.subject || '(sans objet)'}

Corps:
${message.body}

---

Analyse ce message ET g√©n√®re une r√©ponse appropri√©e si pertinent.
R√©ponds en JSON avec les champs: is_relevant, confidence, intent, reason, details, response`;

    return prompt;
  }

  /**
   * üî® Construire contexte depuis driveData (√©vite rechargement)
   */
  _buildContextFromDriveData(driveData) {
    if (!driveData) return '';
    
    let context = '**INFORMATIONS ENTREPRISE** :\n';
    
    if (driveData.businessInfo && !driveData.businessInfo._empty) {
      const biz = driveData.businessInfo;
      context += `- Nom: ${biz.name || 'N/A'}\n`;
      context += `- Description: ${biz.description || 'N/A'}\n`;
      if (biz.services?.length > 0) {
        context += `- Services: ${biz.services.join(', ')}\n`;
      }
      if (biz.prices) {
        context += `- Tarifs: ${JSON.stringify(biz.prices)}\n`;
      }
      if (biz.hours) {
        context += `- Horaires: ${JSON.stringify(biz.hours)}\n`;
      }
    }
    
    if (driveData.planningInfo && !driveData.planningInfo._empty) {
      const planning = driveData.planningInfo;
      context += `\n**DISPONIBILIT√âS** :\n`;
      if (planning.availableSlots?.length > 0) {
        context += `- Cr√©neaux dispos: ${planning.availableSlots.slice(0, 5).join(', ')}\n`;
      }
    }
    
    return context;
  }

  // ========================================
  // üîÑ M√âTHODES ANCIENNES (compatibilit√©)
  // Garder pour ne pas casser le code existant
  // ========================================

  /**
   * üîç Analyser un message (ANCIENNE VERSION - conserv√©e pour compatibilit√©)
   */
  async analyzeMessage(message, user, conversationHistory = []) {
    const settings = user.aiSettings;
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Cl√© API Mistral manquante (K2S_IQ)');
    }

    console.log(`[AI:${user._id}] ü§ñ Analyse message de "${message.from}"...`);

    const accessToken = user.emailConfig?.accessToken;
    let driveContext = '';
    
    if (accessToken) {
      try {
        driveContext = await contextBuilder.buildContextFromDrive(
          accessToken, 
          user._id.toString(),
          { includeAppointments: false }
        );
        console.log(`[AI:${user._id}] ‚úÖ Contexte Drive charg√© (${driveContext.length} caract√®res)`);
      } catch (driveError) {
        console.warn(`[AI:${user._id}] ‚ö†Ô∏è Impossible de charger Drive:`, driveError.message);
        driveContext = contextBuilder._buildMinimalContext();
      }
    } else {
      driveContext = contextBuilder._buildMinimalContext();
    }

    const analysisPrompt = this._buildAnalysisSystemPrompt(driveContext);
    const userPrompt = this._buildAnalysisUserPrompt(message, conversationHistory);

    try {
      // ‚úÖ Construction de la requ√™te avec response_format conditionnel
      const requestBody = {
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: analysisPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.3,
        max_tokens: 200
      };

      // Note: gpt-4o-mini ne supporte pas response_format
      // Si besoin de JSON strict, utiliser gpt-4o ou gpt-4-turbo

      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        requestBody,
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      const content = response.data.choices[0].message.content;
      let analysis = JSON.parse(content);

      const normalizedAnalysis = {
        is_relevant: analysis.is_relevant ?? analysis.isRelevant ?? false,
        confidence: analysis.confidence ?? 0.5,
        intent: analysis.intent ?? 'unknown',
        reason: analysis.reason ?? analysis.details ?? 'Non sp√©cifi√©',
        details: analysis.details ?? {}
      };

      console.log(`[AI:${user._id}] ‚úÖ Analyse: ${normalizedAnalysis.intent} (${(normalizedAnalysis.confidence * 100).toFixed(0)}%)`);

      return normalizedAnalysis;

    } catch (error) {
      console.error(`[AI:${user._id}] ‚ùå Erreur analyse:`, error.message);
      return {
        is_relevant: false,
        confidence: 0.0,
        intent: 'error',
        reason: `Erreur IA: ${error.message}`
      };
    }
  }

  /**
   * ü§ñ G√©n√©rer une r√©ponse (ANCIENNE VERSION - conserv√©e pour compatibilit√©)
   */
  async generateResponse(message, analysis, user, conversationHistory = []) {
    const settings = user.aiSettings;
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Cl√© API OpenAI manquante');
    }

    console.log(`[AI:${user._id}] üí¨ G√©n√©ration r√©ponse pour intent="${analysis.intent}"...`);

    if (!analysis.is_relevant) {
      return this._generateOutOfScopeResponse(settings, user);
    }

    const accessToken = user.emailConfig?.accessToken;
    let driveContext = '';
    
    if (accessToken) {
      try {
        driveContext = await contextBuilder.buildContextFromDrive(
          accessToken, 
          user._id.toString(),
          { includeAppointments: true }
        );
        console.log(`[AI:${user._id}] ‚úÖ Contexte Drive charg√© (${driveContext.length} caract√®res)`);
      } catch (driveError) {
        driveContext = contextBuilder._buildMinimalContext();
      }
    } else {
      driveContext = contextBuilder._buildMinimalContext();
    }

    const systemPrompt = this._buildResponseSystemPrompt(driveContext, settings);
    const userPrompt = this._buildResponseUserPrompt(message, analysis, conversationHistory);

    try {
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: settings.aiModel || 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: settings.temperature || 0.7,
          max_tokens: settings.maxTokens || 500
        },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      const generatedResponse = response.data.choices[0].message.content.trim();
      console.log(`[AI:${user._id}] ‚úÖ R√©ponse g√©n√©r√©e (${generatedResponse.length} caract√®res)`);

      return generatedResponse;

    } catch (error) {
      console.error(`[AI:${user._id}] ‚ùå Erreur g√©n√©ration:`, error.message);
      return `Bonjour,\n\nMerci pour votre message. Nous avons bien re√ßu votre demande et nous vous r√©pondrons dans les plus brefs d√©lais.\n\nCordialement,\n${settings.salonName || user.businessName}`;
    }
  }

  _buildAnalysisSystemPrompt(driveContext) {
    return `${driveContext}

---

Tu es un expert en analyse de messages clients pour un salon/commerce.

**T√ÇCHE** : Analyse le message suivant et d√©termine s'il est pertinent pour l'entreprise.

**CRIT√àRES DE PERTINENCE** :
- ‚úÖ Pertinent : demande de rendez-vous, question sur prestations, horaires, tarifs, annulation/modification RDV
- ‚ùå Non pertinent : spam, publicit√©, newsletter externe, notification automatique (TikTok, LinkedIn, etc.)

**R√âPONDS UNIQUEMENT EN JSON VALIDE** avec cette structure exacte :
{
  "is_relevant": true/false,
  "confidence": 0.0 √† 1.0,
  "intent": "prise_rdv" | "question_info" | "annulation" | "modification" | "reclamation" | "spam" | "autre",
  "reason": "Explication courte de ta d√©cision",
  "details": {
    "date_souhaitee": "si mentionn√©e",
    "prestation_souhaitee": "si mentionn√©e"
  }
}`;
  }

  _buildAnalysisUserPrompt(message, conversationHistory) {
    let prompt = '';

    if (conversationHistory.length > 0) {
      prompt += '**HISTORIQUE CONVERSATION** :\n';
      conversationHistory.slice(-3).forEach(msg => {
        prompt += `- De: ${msg.from}\n  Message: ${msg.body.substring(0, 100)}...\n\n`;
      });
    }

    prompt += `**MESSAGE √Ä ANALYSER** :
De: ${message.from}
Sujet: ${message.subject || '(sans objet)'}

Corps:
${message.body}

---
Analyse ce message et r√©ponds en JSON.`;

    return prompt;
  }

  _buildResponseSystemPrompt(driveContext, settings) {
    const tone = settings.tone || 'professionnel';
    
    return `${driveContext}

---

Tu es ${settings.role || 'un assistant virtuel'} pour ${settings.salonName || 'cette entreprise'}.

**INSTRUCTIONS** :
${settings.instructions || 'Sois professionnel et courtois.'}

**TON** : ${tone}

**R√àGLES** :
1. R√©ponds en fran√ßais naturel et fluide
2. Sois concis (3-5 phrases maximum)
3. Utilise les informations du contexte Drive pour personnaliser
4. Propose des cr√©neaux concrets si pertinent
5. Termine toujours par une formule de politesse
6. N'invente JAMAIS d'informations non pr√©sentes dans le contexte

**FORMAT DE R√âPONSE** : Texte brut uniquement (pas de JSON, pas de markdown).`;
  }

  _buildResponseUserPrompt(message, analysis, conversationHistory) {
    let prompt = '';

    if (conversationHistory.length > 0) {
      prompt += '**HISTORIQUE CONVERSATION** :\n';
      conversationHistory.slice(-3).forEach(msg => {
        prompt += `- ${msg.from}: ${msg.body.substring(0, 80)}...\n`;
      });
      prompt += '\n';
    }

    prompt += `**MESSAGE CLIENT** :
De: ${message.from}
Sujet: ${message.subject || '(sans objet)'}

${message.body}

---

**ANALYSE D√âTECT√âE** :
- Intention: ${analysis.intent}
- Confiance: ${(analysis.confidence * 100).toFixed(0)}%
${analysis.details?.date_souhaitee ? `- Date souhait√©e: ${analysis.details.date_souhaitee}` : ''}
${analysis.details?.prestation_souhaitee ? `- Prestation: ${analysis.details.prestation_souhaitee}` : ''}

G√©n√®re une r√©ponse professionnelle et personnalis√©e.`;

    return prompt;
  }

  _generateOutOfScopeResponse(settings, user) {
    return `Bonjour,

Merci pour votre message.

Je suis un assistant automatique d√©di√© uniquement aux demandes concernant ${settings.salonName || user.businessName} (rendez-vous, prestations, horaires).

Pour toute autre demande, contactez :
üìß ${settings.ownerEmail || user.email}
üìû ${settings.ownerPhone || 'Nous contacter'}

Cordialement,
Assistant ${settings.salonName || user.businessName}`;
  }
}

module.exports = new AIService();
