const { google } = require('googleapis');
const User = require('../models/User');
const aiService = require('./ai.service');
const mailService = require('./mail.service');
const AutoReply = require('../models/AutoReply');

class GmailWebhookService {
  
  /**
   * üîî Configurer le webhook Gmail pour un utilisateur
   */
  async setupWebhook(user) {
    try {
      const oauth2Client = new google.auth.OAuth2(
        process.env.GMAIL_CLIENT_ID,
        process.env.GMAIL_CLIENT_SECRET,
        process.env.GMAIL_REDIRECT_URI
      );

      oauth2Client.setCredentials({
        access_token: user.emailConfig.accessToken,
        refresh_token: user.emailConfig.refreshToken
      });

      const gmail = google.gmail({ version: 'v1', auth: oauth2Client });

      // Cr√©er ou mettre √† jour le watch
      const response = await gmail.users.watch({
        userId: 'me',
        requestBody: {
          labelIds: ['INBOX'],
          topicName: process.env.GMAIL_PUBSUB_TOPIC, // projects/YOUR_PROJECT/topics/gmail-notifications
        }
      });

      console.log(`‚úÖ [Webhook] Gmail configur√© pour ${user.email}`);
      console.log(`üìÖ [Webhook] Expire le: ${new Date(response.data.expiration)}`);

      // Sauvegarder l'expiration
      user.emailConfig.webhookExpiration = new Date(response.data.expiration);
      await user.save();

      return true;

    } catch (error) {
      console.error(`‚ùå [Webhook] Erreur configuration Gmail:`, error.message);
      return false;
    }
  }

  /**
   * üì® Traiter une notification Gmail
   */
  async handleGmailNotification(data) {
    try {
      const { emailAddress, historyId } = data;

      console.log(`üìß [Webhook] Notification re√ßue pour ${emailAddress}`);

      // Trouver l'utilisateur
      const user = await User.findOne({ 'emailConfig.email': emailAddress });

      if (!user) {
        console.log(`‚ö†Ô∏è [Webhook] Utilisateur non trouv√©: ${emailAddress}`);
        return;
      }

      if (!user.aiSettings.isEnabled || !user.aiSettings.autoReplyEnabled) {
        console.log(`‚è∏Ô∏è [Webhook] Auto-r√©ponse d√©sactiv√©e pour ${emailAddress}`);
        return;
      }

      // R√©cup√©rer les nouveaux messages
      const newMessages = await mailService.getUnreadMessages(user);

      if (newMessages.length === 0) {
        console.log(`‚ÑπÔ∏è [Webhook] Aucun nouveau message pour ${emailAddress}`);
        return;
      }

      console.log(`üì® [Webhook] ${newMessages.length} nouveaux messages √† traiter`);

      for (const message of newMessages) {
        await this.processMessage(message, user);
      }

    } catch (error) {
      console.error(`‚ùå [Webhook] Erreur traitement notification:`, error.message);
    }
  }

  /**
   * ü§ñ Traiter un message individuellement
   */
  async processMessage(message, user) {
    try {
      console.log(`üîç [Webhook] Analyse du message de ${message.from}`);

      // 1Ô∏è‚É£ ANALYSE
      const analysis = await aiService.analyzeMessage(message, user);

      if (!analysis.is_relevant) {
        console.log(`‚è≠Ô∏è [Webhook] Message non pertinent de ${message.from}`);
        
        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          from: message.from,
          subject: message.subject,
          body: message.body,
          analysis: {
            isRelevant: false,
            confidence: analysis.confidence,
            intent: analysis.intent,
            reason: analysis.reason
          },
          status: 'ignored'
        });

        return;
      }

      console.log(`‚úÖ [Webhook] Message pertinent : ${analysis.intent} (${(analysis.confidence * 100).toFixed(0)}%)`);

      // 2Ô∏è‚É£ G√âN√âRATION
      const response = await aiService.generateResponse(message, analysis, user);

      // 3Ô∏è‚É£ D√âCISION D'ENVOI
      const shouldAutoSend = user.aiSettings.autoReplyEnabled &&
                             !user.aiSettings.requireValidation &&
                             analysis.confidence >= 0.8;

      if (shouldAutoSend) {
        // ‚úÖ ENVOI AUTOMATIQUE
        await mailService.sendReply({
          to: message.from,
          subject: message.subject ? `Re: ${message.subject}` : 'Re:',
          body: response,
          originalMessageId: message.id,
          user
        });

        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          from: message.from,
          subject: message.subject,
          body: message.body,
          analysis: {
            isRelevant: true,
            confidence: analysis.confidence,
            intent: analysis.intent
          },
          generatedResponse: response,
          sentResponse: response,
          status: 'sent',
          sentAt: new Date()
        });

        console.log(`‚úÖ [Webhook] R√©ponse automatique envoy√©e √† ${message.from}`);

        // üì≤ NOTIFICATION PUSH
        await this.sendPushNotification(user, {
          title: '‚úÖ R√©ponse automatique envoy√©e',
          body: `Message de ${message.from} trait√©`,
          data: { messageId: message.id, from: message.from }
        });

      } else {
        // ‚è∏Ô∏è SAUVEGARDE POUR VALIDATION
        await AutoReply.create({
          userId: user._id,
          messageId: message.id,
          from: message.from,
          subject: message.subject,
          body: message.body,
          analysis: {
            isRelevant: true,
            confidence: analysis.confidence,
            intent: analysis.intent
          },
          generatedResponse: response,
          status: 'pending'
        });

        console.log(`‚è∏Ô∏è [Webhook] R√©ponse en attente de validation pour ${message.from}`);

        // üì≤ NOTIFICATION PUSH
        await this.sendPushNotification(user, {
          title: 'üìù R√©ponse √† valider',
          body: `Message de ${message.from} - ${analysis.intent}`,
          data: { messageId: message.id, from: message.from }
        });
      }

    } catch (error) {
      console.error(`‚ùå [Webhook] Erreur traitement message:`, error.message);
    }
  }

  /**
   * üì≤ Envoyer une notification push
   */
  async sendPushNotification(user, notification) {
    if (!user.fcmToken) {
      console.log(`‚ö†Ô∏è [Push] Pas de FCM token pour ${user.email}`);
      return;
    }

    try {
      const admin = require('firebase-admin');

      await admin.messaging().send({
        token: user.fcmToken,
        notification: {
          title: notification.title,
          body: notification.body
        },
        data: notification.data || {},
        android: {
          priority: 'high',
        },
        apns: {
          headers: {
            'apns-priority': '10'
          }
        }
      });

      console.log(`üì≤ [Push] Notification envoy√©e √† ${user.email}`);

    } catch (error) {
      console.error(`‚ùå [Push] Erreur envoi notification:`, error.message);
    }
  }
}

module.exports = new GmailWebhookService();
